name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Clean old files on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "🧹 기존 tourding 디렉토리 정리 중 (.env 제외)..."
            find ~/tourding -mindepth 1 ! -name '.env' -exec rm -rf {} +



      # ✅ 최신 코드 다시 복사
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "."
          target: "~/tourding"
          strip_components: 0

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/tourding
      
            # 기존 컨테이너 정리
            echo "🔄 기존 컨테이너 정리 중..."
            docker-compose down || true
            docker system prune -f
      
            # 도커 이미지 빌드 (캐시 없이)
            echo "📦 도커 이미지 빌드 중..."
            docker-compose build --no-cache
      
            # 컨테이너 시작
            echo "🚀 컨테이너 시작 중..."
            docker-compose up -d
      
            # 배포 상태 확인
            echo "✅ 배포 상태 확인 중..."
            sleep 10
            docker-compose ps
            docker-compose logs --tail=20
      
            echo "🎉 배포 완료!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ 배포 성공! 새로운 이미지가 EC2에 배포되었습니다."
            echo "🌐 애플리케이션 접속: http://${{ secrets.EC2_HOST }}:8080"
          else
            echo "❌ 배포 실패! 로그를 확인해주세요."
          fi
