name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  EC2_HOST: ec2-3-38-209-142.ap-northeast-2.compute.amazonaws.com
  EC2_USER: ec2-user

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Build with Gradle
      run: ./gradlew build -x test
      
    - name: Build Docker image
      run: docker build -t tourding-app:${{ github.sha }} .
      
    - name: Save Docker image
      run: docker save tourding-app:${{ github.sha }} | gzip > tourding-app.tar.gz
      
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: tourding-app.tar.gz
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # 도커 이미지 다운로드
          cd ~/tourding
          
          # 기존 컨테이너 중지 및 제거
          echo "🔄 기존 컨테이너 정리 중..."
          docker-compose down || true
          docker system prune -f
          
          # 도커 이미지 로드
          echo "📦 도커 이미지 로드 중..."
          docker load < tourding-app.tar.gz
          
          # 최신 태그로 이미지 태깅
          docker tag tourding-app:${{ github.sha }} tourding-app:latest
          
          # 컨테이너 시작
          echo "🚀 컨테이너 시작 중..."
          docker-compose up -d
          
          # 배포 상태 확인
          echo "✅ 배포 상태 확인 중..."
          sleep 10
          docker-compose ps
          docker-compose logs --tail=20
          
          echo "🎉 배포 완료!"
          
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ 배포 성공! 새로운 이미지가 EC2에 배포되었습니다."
          echo "🌐 애플리케이션 접속: http://${{ env.EC2_HOST }}:8080"
        else
          echo "❌ 배포 실패! 로그를 확인해주세요."
        fi
